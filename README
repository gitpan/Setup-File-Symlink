NAME
    Setup::File::Symlink - Setup symlink (existence, target)

VERSION
    version 0.23

SEE ALSO
    Setup

    Setup::File

DESCRIPTION
    This module has Rinci metadata.

FUNCTIONS
    None are exported by default, but they are exportable.

  ln_s(%args) -> [status, msg, result, meta]
    Create symlink.

    Fixed state: "symlink" exists and points to "target".

    Fixable state: "symlink" doesn't exist.

    This function is idempotent (repeated invocations with same arguments
    has the same effect as single invocation).

    Arguments ('*' denotes required arguments):

    *   symlink => *str*

        Path to symlink.

    *   target => *str*

        Path to target.

    Special arguments:

    *   -tx_action => *str*

        You currently can set this to 'rollback'. Usually you do not have to
        pass this yourself, Perinci::Access::InProcess will do it for you.
        For more details on transactions, see Rinci::function::Transaction.

    *   -tx_manager => *obj*

        Instance of transaction manager object, usually
        Perinci::Tx::Manager. Usually you do not have to pass this yourself,
        Perinci::Access::InProcess will do it for you. For more details on
        transactions, see Rinci::function::Transaction.

    Return value:

    Returns an enveloped result (an array). First element (status) is an
    integer containing HTTP status code (200 means OK, 4xx caller error, 5xx
    function error). Second element (msg) is a string containing error
    message, or 'OK' if status is 200. Third element (result) is optional,
    the actual result. Fourth element (meta) is called result metadata and
    is optional, a hash that contains extra information.

  rmsym(%args) -> [status, msg, result, meta]
    Delete symlink.

    Will not delete non-symlinks.

    Fixed state: "path" doesn't exist.

    Fixable state: "path" exists, is a symlink, (and if "target" is defined,
    points to "target").

    This function is idempotent (repeated invocations with same arguments
    has the same effect as single invocation).

    Arguments ('*' denotes required arguments):

    *   path => *str*

    *   target => *str*

        Only delete if existing symlink has this target.

    Special arguments:

    *   -tx_action => *str*

        You currently can set this to 'rollback'. Usually you do not have to
        pass this yourself, Perinci::Access::InProcess will do it for you.
        For more details on transactions, see Rinci::function::Transaction.

    *   -tx_manager => *obj*

        Instance of transaction manager object, usually
        Perinci::Tx::Manager. Usually you do not have to pass this yourself,
        Perinci::Access::InProcess will do it for you. For more details on
        transactions, see Rinci::function::Transaction.

    Return value:

    Returns an enveloped result (an array). First element (status) is an
    integer containing HTTP status code (200 means OK, 4xx caller error, 5xx
    function error). Second element (msg) is a string containing error
    message, or 'OK' if status is 200. Third element (result) is optional,
    the actual result. Fourth element (meta) is called result metadata and
    is optional, a hash that contains extra information.

  setup_symlink(%args) -> [status, msg, result, meta]
    Setup symlink (existence, target).

    On do, will create symlink which points to specified target. If symlink
    already exists but points to another target, it will be replaced with
    the correct symlink if "replace_symlink" option is true. If a file/dir
    already exists and "replace_file"/"replace_dir" option is true, it will
    be moved (trashed) first before the symlink is created.

    On undo, will delete symlink if it was created by this function, and
    restore the original symlink/file/dir if it was replaced during do.

    This function is idempotent (repeated invocations with same arguments
    has the same effect as single invocation).

    Arguments ('*' denotes required arguments):

    *   create => *bool* (default: 1)

        Create if symlink doesn't exist.

        If set to false, then setup will fail (412) if this condition is
        encountered.

    *   replace_dir => *bool* (default: 0)

        Replace if there is existing dir.

        If set to false, then setup will fail (412) if this condition is
        encountered.

    *   replace_file => *bool* (default: 0)

        Replace if there is existing non-symlink file.

        If set to false, then setup will fail (412) if this condition is
        encountered.

    *   replace_symlink => *bool* (default: 1)

        Replace previous symlink if it already exists but doesn't point to
        the wanted target.

        If set to false, then setup will fail (412) if this condition is
        encountered.

    *   symlink* => *str*

        Path to symlink.

    *   target* => *str*

        Target path of symlink.

    Special arguments:

    *   -tx_action => *str*

        You currently can set this to 'rollback'. Usually you do not have to
        pass this yourself, Perinci::Access::InProcess will do it for you.
        For more details on transactions, see Rinci::function::Transaction.

    *   -tx_manager => *obj*

        Instance of transaction manager object, usually
        Perinci::Tx::Manager. Usually you do not have to pass this yourself,
        Perinci::Access::InProcess will do it for you. For more details on
        transactions, see Rinci::function::Transaction.

    Return value:

    Returns an enveloped result (an array). First element (status) is an
    integer containing HTTP status code (200 means OK, 4xx caller error, 5xx
    function error). Second element (msg) is a string containing error
    message, or 'OK' if status is 200. Third element (result) is optional,
    the actual result. Fourth element (meta) is called result metadata and
    is optional, a hash that contains extra information.

AUTHOR
    Steven Haryanto <stevenharyanto@gmail.com>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2012 by Steven Haryanto.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

